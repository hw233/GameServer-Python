package ride;
option py_generic_services=true;
import "universal/public.proto";
import "common.proto";

//坐骑数据
message rideMsg{
	required int64 rideId=1; //坐骑id
	optional int32 rideNo=2; //坐骑编号
	optional int32 shape=3; //造型
	repeated int32 shapeParts=4; //造型部位
	repeated int32 colors=5; //坐骑染色
	optional int32 state=6; //坐骑状态/0未解锁/1蛋/2孵化中/3可以使用(休息、4使用中)
	optional bool rideCurrent=7; //False休息/True使用中
	optional int32 timeOut=8;//孵化倒计时
	optional bool isNewRide=9; //新获得的红点
}

//坐骑列表
message rideListMsg{
	repeated rideMsg rideMsgList=1;//坐骑数据
	optional int32 point=2;//拥有骑乘体力
	optional int32 maxPoint=3;//Max骑乘体力
}



//上行(客户端主动发起)
service terminal2main{
	rpc rpcRideBuyPoint(common.int32_)returns(public.fake); // 购买点数
	rpc rpcRideCurrent(ride.rideMsg)returns(public.fake); //坐骑使用或休息，只需要传rideId和rideIng(False休息/True使用中)
	rpc rpcRideBuy(common.int32_)returns(public.fake); //购买坐骑
	rpc rpcRideHatchComplete(common.int32_)returns(public.fake);//直接完成孵化
	rpc rpcRideHatchStart(common.int32_)returns(public.fake);//开始孵化孵化
	rpc rpcRideGetListData(public.fake)returns(public.fake);//获取坐骑列表数据
}


//下行(服务端主动发起)
service main2terminal{
	rpc rpcRideList(ride.rideListMsg)returns(public.fake); //坐骑列表
	rpc rpcRideAdd(ride.rideMsg)returns(public.fake); //增加坐骑
	rpc rpcRideChange(ride.rideMsg)returns(public.fake); //改变坐骑数据
	rpc rpcRidePointChange(common.int32_)returns(public.fake); //改变骑乘体力

}