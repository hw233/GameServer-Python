# -*- coding: utf-8 -*-
'''仙盟大战
'''
from activity.object import Activity as customActivity

GROUP_SIZE = 4 # 每组大小

STATE_NONE = 0 # 结束期
STATE_SIGN_UP = 1 # 报名期
STATE_NOTICE = 2 # 公示期
STATE_ENTER = 3 # 入场期
STATE_FIGHT = 4 # 开战期

# PK结果
RESULT_NONE = 0 # 激战中
RESULT_WIN = 1 # 胜利
RESULT_FAIL = 2 # 失败
RESULT_DRAW = 3 # 平局

resultDesc = {
	RESULT_NONE: "激战中",
	RESULT_WIN: "胜利",
	RESULT_FAIL: "失败",
	RESULT_DRAW: "平局",
}


#导表开始
class Activity(customActivity):

	npcInfo = {
		1001:{"名称":"宝箱","造型":"8004(0,1,0,0,0)","染色":"0,0,0,0,0","位置":"$curScene,0,0,0","动作":5},
	}

	eventInfo = {
		1001:{"点击":"$box"},
	}

	rewardInfo = {
		1001:{"经验":lambda LV:LV*625+6250,"宠物经验":lambda LV:LV*437+4375,"银币":lambda LV:LV*500+15000,"物品":[1001]},
		1002:{"经验":lambda LV:LV*250+2500,"宠物经验":lambda LV:LV*1750+1750,"银币":lambda LV:LV*200+6000,"物品":[1002]},
		2001:{"经验":lambda LV:LV*1875+18750,"宠物经验":lambda LV:LV*1312+13125,"银币":lambda LV:LV*1750+27500,"物品":[2001]},
		2002:{"经验":lambda LV:LV*1125+11250,"宠物经验":lambda LV:LV*787+7875,"银币":lambda LV:LV*1050+16500,"物品":[2002]},
		2003:{"经验":lambda LV:LV*1500+15000,"宠物经验":lambda LV:LV*1050+10500,"银币":lambda LV:LV*1400+22000,"物品":[2003]},
		3001:{"经验":lambda LV:LV*125+1250,"宠物经验":lambda LV:LV*87+875,"银币":lambda LV:LV*75+4750,"物品":[3001]},
		3002:{"经验":lambda LV:LV*100+1000,"宠物经验":lambda LV:LV*70+700,"银币":lambda LV:LV*60+3800,"物品":[3002]},
		4001:{"物品":[4001]},
	}

	rewardPropsInfo = {
		1001:(
			{"权重":1000,"物品":"225901","数量":"1","绑定":0,"传闻":0},
		),
		1002:(
			{"权重":1000,"物品":"230101","数量":"2","绑定":0,"传闻":0},
		),
		2001:(
			{"权重":300,"物品":"225001","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225002","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225003","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225004","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225005","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225006","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225007","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225008","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225009","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225010","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"225001","数量":"3","绑定":0,"传闻":0},
			{"权重":250,"物品":"225002","数量":"3","绑定":0,"传闻":0},
			{"权重":250,"物品":"225003","数量":"3","绑定":0,"传闻":0},
			{"权重":250,"物品":"225004","数量":"3","绑定":0,"传闻":0},
			{"权重":250,"物品":"225005","数量":"3","绑定":0,"传闻":0},
			{"权重":250,"物品":"225006","数量":"3","绑定":0,"传闻":0},
			{"权重":250,"物品":"225007","数量":"3","绑定":0,"传闻":0},
			{"权重":250,"物品":"225008","数量":"3","绑定":0,"传闻":0},
			{"权重":250,"物品":"225009","数量":"3","绑定":0,"传闻":0},
			{"权重":250,"物品":"225010","数量":"3","绑定":0,"传闻":0},
			{"权重":30,"物品":"234201","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234202","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234203","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234204","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234205","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234206","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234207","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234208","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234209","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234210","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234211","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234212","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234213","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234214","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234215","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234216","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234217","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234218","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234219","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234220","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234221","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234222","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234223","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234224","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234225","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234226","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234227","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234228","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234229","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234230","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234231","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234232","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234233","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234234","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234235","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234236","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234237","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234238","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234239","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234240","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234241","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234242","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234243","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234244","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234245","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234246","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234247","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234248","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234249","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234250","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234251","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234252","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234253","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234401","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234402","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234403","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234404","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234405","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234406","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234407","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234408","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234409","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234410","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234411","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234412","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234413","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234414","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234415","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234416","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234417","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234418","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234419","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":30,"物品":"234420","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":25,"物品":"234904","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":200,"物品":"225901","数量":"1","绑定":0,"传闻":0},
			{"权重":55,"物品":"225902","数量":"1","绑定":0,"传闻":0},
			{"权重":30,"物品":"225903","数量":"1","绑定":0,"传闻":"RSM8002"},
			{"权重":2000,"物品":"0","数量":"0","绑定":0,"传闻":0},
		),
		2002:(
			{"权重":300,"物品":"225001","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225002","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225003","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225004","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225005","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225006","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225007","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225008","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225009","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225010","数量":"1","绑定":0,"传闻":0},
			{"权重":230,"物品":"225001","数量":"3","绑定":0,"传闻":0},
			{"权重":230,"物品":"225002","数量":"3","绑定":0,"传闻":0},
			{"权重":230,"物品":"225003","数量":"3","绑定":0,"传闻":0},
			{"权重":230,"物品":"225004","数量":"3","绑定":0,"传闻":0},
			{"权重":230,"物品":"225005","数量":"3","绑定":0,"传闻":0},
			{"权重":230,"物品":"225006","数量":"3","绑定":0,"传闻":0},
			{"权重":230,"物品":"225007","数量":"3","绑定":0,"传闻":0},
			{"权重":230,"物品":"225008","数量":"3","绑定":0,"传闻":0},
			{"权重":230,"物品":"225009","数量":"3","绑定":0,"传闻":0},
			{"权重":230,"物品":"225010","数量":"3","绑定":0,"传闻":0},
			{"权重":20,"物品":"234201","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234202","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234203","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234204","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234205","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234206","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234207","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234208","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234209","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234210","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234211","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234212","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234213","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234214","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234215","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234216","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234217","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234218","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234219","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234220","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234221","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234222","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234223","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234224","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234225","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234226","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234227","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234228","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234229","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234230","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234231","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234232","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234233","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234234","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234235","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234236","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234237","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234238","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234239","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234240","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234241","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234242","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234243","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234244","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234245","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234246","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234247","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234248","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234249","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234250","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234251","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234252","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234253","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234401","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234402","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234403","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234404","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234405","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234406","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234407","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234408","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234409","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234410","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234411","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234412","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234413","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234414","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234415","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234416","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234417","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234418","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234419","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":20,"物品":"234420","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":15,"物品":"234904","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":145,"物品":"225901","数量":"1","绑定":0,"传闻":0},
			{"权重":55,"物品":"225902","数量":"1","绑定":0,"传闻":0},
			{"权重":25,"物品":"225903","数量":"1","绑定":0,"传闻":"RSM8003"},
			{"权重":3000,"物品":"0","数量":"0","绑定":0,"传闻":0},
		),
		2003:(
			{"权重":300,"物品":"225001","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225002","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225003","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225004","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225005","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225006","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225007","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225008","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225009","数量":"1","绑定":0,"传闻":0},
			{"权重":300,"物品":"225010","数量":"1","绑定":0,"传闻":0},
			{"权重":240,"物品":"225001","数量":"3","绑定":0,"传闻":0},
			{"权重":240,"物品":"225002","数量":"3","绑定":0,"传闻":0},
			{"权重":240,"物品":"225003","数量":"3","绑定":0,"传闻":0},
			{"权重":240,"物品":"225004","数量":"3","绑定":0,"传闻":0},
			{"权重":240,"物品":"225005","数量":"3","绑定":0,"传闻":0},
			{"权重":240,"物品":"225006","数量":"3","绑定":0,"传闻":0},
			{"权重":240,"物品":"225007","数量":"3","绑定":0,"传闻":0},
			{"权重":240,"物品":"225008","数量":"3","绑定":0,"传闻":0},
			{"权重":240,"物品":"225009","数量":"3","绑定":0,"传闻":0},
			{"权重":240,"物品":"225010","数量":"3","绑定":0,"传闻":0},
			{"权重":25,"物品":"234201","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234202","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234203","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234204","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234205","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234206","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234207","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234208","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234209","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234210","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234211","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234212","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234213","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234214","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234215","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234216","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234217","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234218","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234219","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234220","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234221","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234222","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234223","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234224","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234225","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234226","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234227","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234228","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234229","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234230","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234231","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234232","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234233","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234234","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234235","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234236","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234237","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234238","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234239","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234240","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234241","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234242","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234243","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234244","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234245","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234246","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234247","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234248","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234249","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234250","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234251","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234252","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234253","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234401","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234402","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234403","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234404","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234405","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234406","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234407","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234408","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234409","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234410","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234411","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234412","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234413","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234414","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234415","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234416","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234417","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234418","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234419","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":25,"物品":"234420","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":20,"物品":"234904","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":165,"物品":"225901","数量":"1","绑定":0,"传闻":0},
			{"权重":60,"物品":"225902","数量":"1","绑定":0,"传闻":0},
			{"权重":30,"物品":"225903","数量":"1","绑定":0,"传闻":"RSM8004"},
			{"权重":2500,"物品":"0","数量":"0","绑定":0,"传闻":0},
		),
		3001:(
			{"权重":215,"物品":"225001","数量":"1","绑定":0,"传闻":0},
			{"权重":215,"物品":"225002","数量":"1","绑定":0,"传闻":0},
			{"权重":215,"物品":"225003","数量":"1","绑定":0,"传闻":0},
			{"权重":215,"物品":"225004","数量":"1","绑定":0,"传闻":0},
			{"权重":215,"物品":"225005","数量":"1","绑定":0,"传闻":0},
			{"权重":215,"物品":"225006","数量":"1","绑定":0,"传闻":0},
			{"权重":215,"物品":"225007","数量":"1","绑定":0,"传闻":0},
			{"权重":215,"物品":"225008","数量":"1","绑定":0,"传闻":0},
			{"权重":215,"物品":"225009","数量":"1","绑定":0,"传闻":0},
			{"权重":215,"物品":"225010","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234201","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234202","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234203","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234204","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234205","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234206","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234207","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234208","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234209","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234210","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234211","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234212","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234213","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234214","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234215","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234216","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234217","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234218","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234219","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234220","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234221","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234222","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234223","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234224","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234225","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234226","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234227","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234228","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234229","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234230","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234231","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234232","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234233","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234234","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234235","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234236","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234237","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234238","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234239","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234240","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234241","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234242","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234243","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234244","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234245","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234246","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234247","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234248","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234249","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234250","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234251","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234252","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":1,"物品":"234253","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234401","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234402","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234403","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234404","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234405","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234406","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234407","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234408","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234409","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234410","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234411","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234412","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234413","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234414","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234415","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234416","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234417","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234418","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234419","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234420","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":3,"物品":"234904","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":250,"物品":"246001","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"246002","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"246003","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"246004","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"246005","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"246006","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"246007","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"246008","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"246009","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"246010","数量":"1","绑定":0,"传闻":0},
			{"权重":225,"物品":"225901","数量":"1","绑定":0,"传闻":0},
			{"权重":6,"物品":"225902","数量":"1","绑定":0,"传闻":0},
			{"权重":3,"物品":"225903","数量":"1","绑定":0,"传闻":"RSM8005"},
			{"权重":5000,"物品":"0","数量":"0","绑定":0,"传闻":0},
		),
		3002:(
			{"权重":250,"物品":"225001","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"225002","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"225003","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"225004","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"225005","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"225006","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"225007","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"225008","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"225009","数量":"1","绑定":0,"传闻":0},
			{"权重":250,"物品":"225010","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234401","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234402","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234403","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234404","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234405","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234406","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234407","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234408","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234409","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234410","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234411","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234412","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234413","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234414","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234415","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234416","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234417","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234418","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234419","数量":"1","绑定":0,"传闻":0},
			{"权重":4,"物品":"234420","数量":"1","绑定":0,"传闻":0},
			{"权重":220,"物品":"246001","数量":"1","绑定":0,"传闻":0},
			{"权重":220,"物品":"246002","数量":"1","绑定":0,"传闻":0},
			{"权重":220,"物品":"246003","数量":"1","绑定":0,"传闻":0},
			{"权重":220,"物品":"246004","数量":"1","绑定":0,"传闻":0},
			{"权重":220,"物品":"246005","数量":"1","绑定":0,"传闻":0},
			{"权重":220,"物品":"246006","数量":"1","绑定":0,"传闻":0},
			{"权重":220,"物品":"246007","数量":"1","绑定":0,"传闻":0},
			{"权重":220,"物品":"246008","数量":"1","绑定":0,"传闻":0},
			{"权重":220,"物品":"246009","数量":"1","绑定":0,"传闻":0},
			{"权重":220,"物品":"246010","数量":"1","绑定":0,"传闻":0},
			{"权重":211,"物品":"225901","数量":"1","绑定":0,"传闻":0},
			{"权重":6,"物品":"225902","数量":"1","绑定":0,"传闻":0},
			{"权重":3,"物品":"225903","数量":"1","绑定":0,"传闻":0},
			{"权重":5000,"物品":"0","数量":"0","绑定":0,"传闻":0},
		),
		4001:(
			{"权重":310,"物品":"225001","数量":"1","绑定":0,"传闻":0},
			{"权重":310,"物品":"225002","数量":"1","绑定":0,"传闻":0},
			{"权重":310,"物品":"225003","数量":"1","绑定":0,"传闻":0},
			{"权重":310,"物品":"225004","数量":"1","绑定":0,"传闻":0},
			{"权重":310,"物品":"225005","数量":"1","绑定":0,"传闻":0},
			{"权重":310,"物品":"225006","数量":"1","绑定":0,"传闻":0},
			{"权重":310,"物品":"225007","数量":"1","绑定":0,"传闻":0},
			{"权重":310,"物品":"225008","数量":"1","绑定":0,"传闻":0},
			{"权重":310,"物品":"225009","数量":"1","绑定":0,"传闻":0},
			{"权重":310,"物品":"225010","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234201","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234202","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234203","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234204","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234205","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234206","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234207","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234208","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234209","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234210","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234211","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234212","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234213","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234214","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234215","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234216","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234217","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234218","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234219","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234220","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234221","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234222","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234223","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234224","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234225","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234226","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234227","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234228","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234229","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234230","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234231","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234232","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234233","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234234","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234235","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234236","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234237","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234238","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234239","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234240","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234241","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234242","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234243","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234244","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234245","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234246","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234247","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234248","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234249","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234250","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234251","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234252","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234253","数量":"1","绑定":0,"传闻":0},
			{"权重":2,"物品":"234401","数量":"1","绑定":0,"传闻":0},
			{"权重":2,"物品":"234402","数量":"1","绑定":0,"传闻":0},
			{"权重":2,"物品":"234403","数量":"1","绑定":0,"传闻":0},
			{"权重":2,"物品":"234404","数量":"1","绑定":0,"传闻":0},
			{"权重":2,"物品":"234405","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234406","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234407","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234408","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234409","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234410","数量":"1","绑定":0,"传闻":0},
			{"权重":2,"物品":"234411","数量":"1","绑定":0,"传闻":0},
			{"权重":2,"物品":"234412","数量":"1","绑定":0,"传闻":0},
			{"权重":2,"物品":"234413","数量":"1","绑定":0,"传闻":0},
			{"权重":2,"物品":"234414","数量":"1","绑定":0,"传闻":0},
			{"权重":2,"物品":"234415","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234416","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234417","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234418","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234419","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234420","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"234904","数量":"1","绑定":0,"传闻":0},
			{"权重":325,"物品":"246001","数量":"1","绑定":0,"传闻":0},
			{"权重":325,"物品":"246002","数量":"1","绑定":0,"传闻":0},
			{"权重":325,"物品":"246003","数量":"1","绑定":0,"传闻":0},
			{"权重":325,"物品":"246004","数量":"1","绑定":0,"传闻":0},
			{"权重":325,"物品":"246005","数量":"1","绑定":0,"传闻":0},
			{"权重":325,"物品":"246006","数量":"1","绑定":0,"传闻":0},
			{"权重":325,"物品":"246007","数量":"1","绑定":0,"传闻":0},
			{"权重":325,"物品":"246008","数量":"1","绑定":0,"传闻":0},
			{"权重":325,"物品":"246009","数量":"1","绑定":0,"传闻":0},
			{"权重":325,"物品":"246010","数量":"1","绑定":0,"传闻":0},
			{"权重":325,"物品":"246001","数量":"2","绑定":0,"传闻":0},
			{"权重":325,"物品":"246002","数量":"2","绑定":0,"传闻":0},
			{"权重":325,"物品":"246003","数量":"2","绑定":0,"传闻":0},
			{"权重":325,"物品":"246004","数量":"2","绑定":0,"传闻":0},
			{"权重":325,"物品":"246005","数量":"2","绑定":0,"传闻":0},
			{"权重":325,"物品":"246006","数量":"2","绑定":0,"传闻":0},
			{"权重":325,"物品":"246007","数量":"2","绑定":0,"传闻":0},
			{"权重":325,"物品":"246008","数量":"2","绑定":0,"传闻":0},
			{"权重":325,"物品":"246009","数量":"2","绑定":0,"传闻":0},
			{"权重":325,"物品":"246010","数量":"2","绑定":0,"传闻":0},
			{"权重":313,"物品":"225901","数量":"1","绑定":0,"传闻":0},
			{"权重":2,"物品":"225902","数量":"1","绑定":0,"传闻":0},
			{"权重":1,"物品":"225903","数量":"1","绑定":0,"传闻":0},
		),
	}

	groupInfo = {
	}

	chatInfo = {
		1001:'''你没有仙盟，不能进入仙盟大战场景''',
		1002:'''本盟尚未报名仙盟大战''',
		1003:'''本盟没有报名仙盟大战''',
		1005:'''本周仙盟大战未能开启''',
		1006:'''成功报名本周仙盟大战''',
		1007:'''已成功报名下一场仙盟大战，扣除仙盟资金#C02$costFund#n''',
		1008:'''仙盟资金不足，不可报名''',
		1009:'''当前不是报名期，不可报名仙盟大战''',
		1010:'''本盟已报名仙盟大战''',
		1011:'''仙盟资金不足，自动报名失败''',
		1012:'''#L1<14,21>*[仙盟大战]*02#n将于#C04周二20:00#n开启，可提前#C0430分钟#n入场''',
		1013:'''#L1<14,21>*[仙盟大战]*02#n将于#C04周四20:00#n开启，可提前#C0430分钟#n入场''',
		1014:'''报名后仙盟资金不足3天维护，不可报名''',
		1015:'''仙盟资金不足7天消耗，自动报名失败''',
		1016:'''离开仙盟大战场景个人积分将会被清0，是否离开仙盟大战场景？\nQ取消\nQ确定''',
		1017:'''是否离开仙盟大战场景？\nQ取消\nQ确定''',
		2001:'''#C04地煞场成员#n才能开启''',
		2002:'''#C0420:00#n前入场的成员才能开启''',
		2003:'''仙盟大战地煞场已结束，不可进入仙盟大战地图''',
		2004:'''仙盟大战开始后只能单人进入，进场后只能观战''',
		2005:'''学徒不能参加仙盟大战''',
		2006:'''#C01$roleName#n不是本盟成员，不可进入仙盟大战''',
		2007:'''#C01$roleName#n是仙盟学徒，不可进入仙盟大战''',
		2008:'''#C01$roleName#n入盟时间#C04<72小时#n，不可进入仙盟大战''',
		2009:'''#C01$roleName#n是仙盟天罡场成员，不可与你一起进入仙盟大战''',
		2010:'''#C01$roleName#n是仙盟地煞场成员，不可与你一起进入仙盟大战''',
		2011:'''进盟#C04未满72小时#n，不能参加仙盟大战''',
		2012:'''你现在处于暂离状态，不可进入仙盟大战''',
		2013:'''#C01$roleName#n处于暂离状态，不可进入仙盟大战''',
		3001:'''本场景无法传送，请点击#C04仙盟战#n按钮离开''',
		3002:'''仙盟大战场景内不可退出仙盟''',
		4001:'''本盟在本次#L1<14,21>*[仙盟大战]*02#n中幸运地轮空，仙盟大战宝箱将在仙盟大战开始后#C045分钟#n刷新''',
		4002:'''#L1<14,21>*[仙盟大战]*02#n将于今日#C0420:00#n准时进行，本盟对手是#C02$enemy#n，#L1<66>*[查看本盟天罡场成员]*02#n''',
		4003:'''#L1<14,21>*[仙盟大战]*02#n还有#C04$enterTime#n开始，请尽快入场''',
		4004:'''#L1<14,21>*[仙盟大战]*02#n宝箱已刷新，#C0420:00#n前入场的#C04地煞场成员#n才可以拾取哦''',
		4005:'''本次#L1<14,21>*[仙盟大战]*02#n已结束，本盟成功战胜对手#C02$enemy#n''',
		4006:'''本次#L1<14,21>*[仙盟大战]*02#n已结束，本盟不敌#C02$enemy#n，不幸落败''',
		5001:'''您已完成精英组对决，可在仙盟大战地图内查看其它成员战斗''',
		5002:'''您现在只能观战，不能进入战斗''',
		5003:'''#C01$roleName#n积分不足，不可发起战斗''',
		5004:'''你积分不足，不可发起战斗''',
		5005:'''对方是天罡场成员，不可发起战斗''',
		5006:'''目标正在战斗中''',
		5007:'''对方只能观战，无法进入战斗''',
		5008:'''目标处于败者保护状态（剩余#C04$protectTimeout#n秒），不可发起战斗''',
		5009:'''我方主动进入战斗，扣除了#C02$point#n积分''',
		5010:'''积分为0，你被变成一只小鸡，可以点击己方仙盟成员进行观战哦''',
		5011:'''#C01$roleName#n积分为0，已被强制退出队伍''',
		5012:'''你战斗胜利，获得了#C02$point点#n积分''',
		5013:'''你战斗失败，扣除#C02$point点#n积分''',
		6001:'''恭喜恭喜，本次对战#C02$enemy#n胜利，天罡场比分为#C02$score#n，仙盟资金增加#C02$guildFund#n，请领取获胜奖励。''',
		6002:'''很遗憾，本次对战#C02$enemy#n失败，天罡场比分为#C02$score#n，仙盟资金增加#C02$guildFund#n，请下次继续努力。''',
		6003:'''本盟对战#C02$enemy#n胜利，天罡场比分为#C02$score#n，仙盟资金增加#C02$guildFund#n#32''',
		6004:'''很遗憾，本盟对战#C02$enemy#n失败，天罡场比分为#C02$score#n，仙盟资金增加#C02$guildFund#n''',
		6005:'''本次#L1<14,21>*[仙盟大战]*02#n我方仙盟对战#C02$enemy#n获胜！''',
		6006:'''本次#L1<14,21>*[仙盟大战]*02#n我方仙盟对战#C02$enemy#n失败！''',
		6007:'''本次#L1<14,21>*[仙盟大战]*02#n我方仙盟轮空，直接获胜''',
		6008:'''仙盟大战结果：$guildWin战胜$guildFail''',
		6009:'''仙盟大战结果：$guildWin轮空，直接获胜''',
		8002:'''#C01$roleName#n在#L1<14,21>*[仙盟大战]*02#n天罡组中成功击败了对手，正要追击的他“不幸”被一个$lnkProps绊倒#59''',
		8003:'''#C01$roleName#n在#L1<14,21>*[仙盟大战]*02#n天罡组中不幸落败，却意外地捡到一个$lnkProps#45''',
		8004:'''#C01$roleName#n在#L1<14,21>*[仙盟大战]*02#n天罡组中与对手战成平局，正准备仰天长叹的他忽然被一个$lnkProps砸到#29''',
		8005:'''#C01$roleName#n正在#L1<14,21>*[仙盟大战]*02#n地煞组中大杀特杀，忽然眼前一花，一个$lnkProps掉落在他的面前''',
	}

	branchInfo = {
	}

	fightInfo = {
	}

	ableInfo = {
	}

	lineupInfo = {
	}

	sceneInfo = {
		101:{"名称":"帮战","资源":1130},
	}

	configInfo = {
		"初始积分":2000,
		"点人扣除积分":100,
		"胜利积分":10,
		"失败扣除积分":2000,
		"积分扣除上限":800,
		"保护时间":60,
		"清场时间":600,
		"报名费用":1500000,
		"入场时间":1800,
		"入场传闻时间点":(30, 40, 50, 55, 59),
		"宝箱数":"CNT/4",
		"刷宝箱时间":300,
		"开宝箱奖励":4001,
		"入帮时间限制":259200,
		"免报名费用时间":604800,
		"回合上限":30,
		"精英队胜利积分":30,
		"精英队平局积分":10,
		"胜利奖励资金":3000000,
		"失败奖励资金":1200000,
		"活跃":20,
	}
#导表结束

	def __init__(self, _id, name):
		customActivity.__init__(self, _id, name)
		self.state = STATE_NONE
		self.signUpList = {} # 报名列表
		self.groupList = {} # 对战组列表
		self.roleInfoList = {} # 角色信息列表
		self.resultList = {} # 对战结果
		
	def save(self):
		data = customActivity.save(self)
		
		data["state"] = self.state

		data["signUpList"] = {}
		for guildId, signUpObj in self.signUpList.iteritems():
			data["signUpList"][guildId] = signUpObj.save()
		
		data["groupList"] = self.groupList
		return data
	
	def load(self, data):
		if not data:
			return
		customActivity.load(self, data)
		
		self.state = data.get("state", 0)
		
		for guildId, signUpData in data["signUpList"].iteritems():
			signUpObj = self.newSignUp(guildId)
			signUpObj.load(signUpData)
			self.signUpList[guildId] = signUpObj
		
		self.groupList = data["groupList"]
		
# 	def init(self):
# 		self.resumeEnd()
# 		self.resumeSignUpBegin()
# 		self.resumeNoticeBegin()
# 		self.resumeNoticeBegin2()
# 		self.resumeEnterBegin()
# 		self.resumeBegin()
		
	def onNewHour(self, day, hour, wday):
		if wday in (2, 4):
			if wday == 2 and hour == 0: # 周二0:00 第一场公示开始
				if self.state != STATE_NOTICE:
					self.noticeBegin()
			if 8 <= hour <= 19: # 对手传闻
				self.messagePK()
			if hour == 19: # 入场
				if self.state != STATE_ENTER:
					ti = getattr(self, "enterTimeout", self.configInfo["入场时间"])
					self.startTimer(self.enterBegin, ti, "enterBegin") # 入场开始
			if hour == 20: # 开始
				if self.state != STATE_FIGHT:
					self.begin()
			elif hour == 22: # 结束
				if self.state != STATE_NONE:
					self.end()
				if wday == 2: # 周二22:00 第二场公示开始
					if self.state != STATE_NOTICE:
						self.noticeBegin2()
				elif wday == 4: # 报名开始
					if self.state != STATE_SIGN_UP:
						self.signUpBegin()
	
	def inSignUpTime(self):
		'''报名期
		'''
		datePart = getDatePart()
		hour = datePart["hour"]
		wday = datePart["wday"]
		if wday in (2, 3):
			return False
		if wday == 4 and hour < 22:
			return False
		return True
	
	def inNoticeTime(self):
		'''公示期
		'''
		return not self.inSignUpTime()
	
	def inEnterTime(self):
		'''入场期
		'''
		datePart = getDatePart()
		hour = datePart["hour"]
		minute = datePart["minute"]
		wday = datePart["wday"]
		if wday in (2, 4) and hour == 19 and minute >= 30: # 周二、周四  19:30~20:00
			return True
		return False
	
	def inFightTime(self):
		'''开战期
		'''
		datePart = getDatePart()
		hour = datePart["hour"]
		wday = datePart["wday"]
		if wday in (2, 4) and 20 <= hour < 22: # 周二、周四  20:00~22:00
			return True
		return False
	
	def isSignUp(self, guildId):
		'''是否已报名
		'''
		return guildId in self.signUpList
	
	def newSignUp(self, guildId):
		'''创建报名对象
		'''
		return SignUp(guildId, self, self.__dirtyEventHandler)
	
	def trySignUp(self, guildObj, who=None, reason="手动"):
		if not self.inSignUpTime():
			if reason == "手动":
				self.doScript(who, None, "TP1009")
			return False
		if self.isSignUp(guildObj.id):
			if reason == "手动":
				self.doScript(who, None, "TP1010")
			return False
		
		costFund = self.getSignUpCost(guildObj)
		if costFund > 0:
			if guildObj.getFund() < costFund:
				if reason == "手动":
					self.doScript(who, None, "TP1008")
				else:
					guildObj.notifyMail("仙盟大战报名", self.getText(1011), *guild.defines.FIGHT_JOB_LIST)
				return False
			if reason == "手动":
				if (guildObj.getFund() - costFund) < guildObj.getMaintainFund() * 3:
					self.doScript(who, None, "TP1014")
					return False
			else:
				if (guildObj.getFund() - costFund) < guildObj.getMaintainFund() * 7:
					guildObj.notifyMail("仙盟大战报名", self.getText(1015), *guild.defines.FIGHT_JOB_LIST)
					return False
	
			guildObj.addFund(-costFund, "报名仙盟大战")
		
		self.signUp(guildObj, reason)

		if reason == "手动":
			self.doScript(who, None, "TP1006")
		content = self.getText(1007)
		content = content.replace("$costFund", str(costFund))
		guildObj.notifyMail("仙盟大战报名", content)
		return True
	
	def getSignUpCost(self, guildObj):
		# 新建帮派一周内免费
		if getSecond() - guildObj.fetch("birth") < self.configInfo["免报名费用时间"]:
			return 0
		return self.configInfo["报名费用"]
	
	def signUp(self, guildObj, reason):
		'''报名
		'''
		self.markDirty()
		guildId = guildObj.id
		signUpObj = self.newSignUp(guildId)
		self.signUpList[guildId] = signUpObj
		self.log("signUp: %s %s" % (guildId, reason))
		
	def resumeSignUpBegin(self):
		'''恢复报名开始
		'''
		if not self.inSignUpTime():
			return
		if self.state == STATE_SIGN_UP:
			return
		self.signUpBegin()
			
	def signUpBegin(self):
		'''报名开始
		'''
		self.log("signUpBegin")
		self.markDirty()
		self.state = STATE_SIGN_UP
		self.signUpList = {}
		self.groupList = {}
		self.roleInfoList = {}
		self.resultList = {}
		self.autoSignUp()
	
	def autoSignUp(self):
		'''自动报名
		'''
		for guildObj in guild.getGuildList():
			if not guildObj.guildFight.isAutoSignUp():
				continue
			if not self.trySignUp(guildObj, reason="自动"):
				guildObj.guildFight.setAutoSignUp(False)
		self.log("autoSignUp: %s guilds" % len(self.signUpList))
		
	def allotMatch(self, groupNo, pkList):
		'''分配对手
		'''
		print "allotMatch", pkList
		self.markDirty()
		pkList = pkList[:]
		if len(pkList) == 1: # 轮空
			pkList.append(0)
		
		pkList2 = list(reversed(pkList))
		for matchList in (pkList, pkList2):
			pkGuild1, pkGuild2 = matchList
			signUpObj = self.signUpList.get(pkGuild1)
			if signUpObj:
				signUpObj.init()
				signUpObj.set("groupNo", groupNo)
				signUpObj.set("pkGuild", pkGuild2)
	
	def resumeNoticeBegin(self):
		'''恢复公示开始(第一场)
		'''
		if self.state == STATE_NOTICE:
			return
	
		datePart = getDatePart()
		hour = datePart["hour"]
		wday = datePart["wday"]
		if wday == 2 and hour < 19: # 超过19:00本周的仙盟大战就不开了
			self.noticeBegin()
				
	def noticeBegin(self):
		'''公示开始(第一场)
		'''
		self.log("noticeBegin")
		self.markDirty()
		self.state = STATE_NOTICE
		if not self.signUpList: # 没有帮派报名
			self.log("noticeBegin: empty signUpList")
			return
		self.createGroup()
	
	def createGroup(self):
		'''生成对战组(第一场)
		'''
		self.markDirty()
		self.groupList = {}

		# 排序
		orderList = []
		for guildId in self.signUpList:
			guildObj = guild.getGuild(guildId)
			if guildObj:
				orderList.append(guildObj)
		
		orderList.sort(key=self._sortKeyForGroup, reverse=True)
		orderList = [guildObj.id for guildObj in orderList]
		
		# 分组
		countGuild = len(orderList)
		countGroup = int(math.ceil( countGuild * 1.0 / GROUP_SIZE ))
		for i in xrange(countGroup):
			groupNo = i + 1
			idxBegin = i * GROUP_SIZE
			idxEnd = idxBegin + GROUP_SIZE
			guildIdList = orderList[idxBegin:idxEnd]
			guildIdList = shuffleList(guildIdList)
			self.groupList[groupNo] = []
			while guildIdList:
				pkList, guildIdList = guildIdList[:2], guildIdList[2:]
				self.groupList[groupNo].append(pkList)
				self.allotMatch(groupNo, pkList)
		
		self.log("createGroup data: %s" % self.groupList)
		self.log("createGroup: %s groups, %s guilds" % (countGroup, countGuild))
		
	def _sortKeyForGroup(self, guildObj):
		'''排序key
		'''
		return guildObj.guildFight.getPoint(), guildObj.level, guildObj.id
	
	def resumeNoticeBegin2(self):
		'''恢复公示开始(第二场)
		'''
		if self.state == STATE_NOTICE:
			return
		
		datePart = getDatePart()
		hour = datePart["hour"]
		wday = datePart["wday"]
		if (wday == 2 and hour >= 22) or (wday == 4 and hour < 19):
			self.noticeBegin2()
	
	def noticeBegin2(self):
		'''公示开始(第二场)
		'''
		self.log("noticeBegin2")
		self.markDirty()
		self.state = STATE_NOTICE
		if not self.groupList: # 没有第一场的对战组
			self.log("noticeBegin2: empty groupList")
			return
		self.createGroup2()
		
	def createGroup2(self):
		'''生成对战组(第二场)
		'''
		self.markDirty()

		groupList = {}
		for groupNo in self.groupList:
			winList = [] # 胜利的
			failList = [] # 失败的
			for pkList in self.groupList[groupNo]:
				for guildId in pkList:
					if self.resultList.get(guildId) == RESULT_WIN:
						winList.append(guildId)
					else:
						failList.append(guildId)

			count = len(winList) + len(failList)
			groupList[groupNo] = []
			if count <= 2:
				pkList = winList + failList
				groupList[groupNo].append(pkList)
			else:
				groupList[groupNo].append(winList)
				self.allotMatch(groupNo, winList)
				groupList[groupNo].append(failList)
				self.allotMatch(groupNo, failList)
			

		self.groupList = groupList
		self.result = {}
		self.log("createGroup2 data: %s" % self.groupList)
	
	def getGroupNoByGuild(self, guildId):
		'''获取对战组号
		'''
		signUpObj = self.signUpList.get(guildId)
		if signUpObj:
			return signUpObj.fetch("groupNo")
		return 0
	
	def getGroup(self, groupNo):
		'''获取对战组
		'''
		return self.groupList.get(groupNo, [])
	
	def getGroupByGuild(self, guildId):
		'''获取本帮的对战组
		'''
		groupNo = self.getGroupNoByGuild(guildId)
		if groupNo:
			return self.getGroup(groupNo)
		return []
		
	def createGameScene(self):
		'''生成活动场景
		'''
		sceneCount = 0
		for groupNo in self.groupList:
			for pkList in self.groupList[groupNo]:
				sceneCount += 1
				sceneObj = self.addScene(101, "gameScene")
				sceneObj.pkList = pkList
				sceneObj.eventOnEnter += onEnter
				sceneObj.eventOnLeave += onLeave
				sceneObj.denyTransfer = self.getText(3001)
				sceneObj.denyGuildQuit = self.getText(3002)
		
		self.log("createGameScene: %s scenes" % sceneCount)
	
	def inGameScene(self, who):
		'''是否在活动场景
		'''
		for sceneObj in self.getSceneListByType("gameScene"):
			if sceneObj.id == who.sceneId:
				return True
		return False
	
	def getSceneByGuild(self, guildId):
		'''根据帮派获取对战场景
		'''
		for sceneObj in self.getSceneListByType("gameScene"):
			if guildId in sceneObj.pkList:
				return sceneObj
		return None
	
	def transToGameScene(self, who):
		'''传送到对战场景
		'''
		sceneObj = self.getSceneByGuild(who.getGuildId())
		self.transfer(who, sceneObj.id)
		
	def enterBegin(self):
		'''入场开始
		'''
		self.log("enterBegin")
		self.markDirty()
		self.state = STATE_ENTER
		if not self.groupList:
			return

		signUpList = {}
		for guildId, signUpObj in self.signUpList.iteritems():
			guildObj = guild.getGuild(guildId)
			if not guildObj:
				continue
			signUpList[guildId] = signUpObj
			signUpObj.fightTeam = copy.deepcopy(guildObj.guildFight.fightTeam)
		self.signUpList = signUpList

		self.createGameScene() # 创建仙盟大战场景
		self.messageEnter() # 入场传闻
		
	def resumeEnterBegin(self):
		'''恢复入场
		'''
		if not self.inEnterTime():
			return
		if self.state == STATE_ENTER:
			if not self.groupList:
				return
			self.createGameScene() # 创建仙盟大战场景
			self.messageEnter() # 入场传闻
		else:
			self.enterBegin()
	
	def enterScene(self, who, npcObj):
		'''进入对战场景
		'''
		if not self.validEnterScene(who, npcObj):
			return
		
		signUpObj = self.signUpList.get(who.getGuildId())
		teamNo = signUpObj.getFightTeamNo(who.id)

		if teamNo: # 精英组成员进场
			teamObj = who.getTeamObj()
			if teamObj:
				for roleId in teamObj.getInTeamList():
					if roleId == who.id:
						continue
					memberObj = getRole(roleId)
					if not memberObj:
						continue
					memberTeamNo = signUpObj.getFightTeamNo(roleId)
					if memberTeamNo == teamNo: # 队伍中不同精英组编号的成员会被踢出并进入到对应精英组编号的队伍
						continue
					teamObj.remove(roleId)
					self.enterSceneForFightTeam(memberObj, signUpObj, memberTeamNo)
			self.enterSceneForFightTeam(who, signUpObj, teamNo)
		else:
			self.transToGameScene(who)
			
	def validEnterScene(self, who, npcObj):
		'''检查进入仙盟大战场景
		'''
		guildObj = who.getGuildObj()
		guildId = who.getGuildId()
		if not guildObj:
			npcObj.say(who, self.getText(1001))
			return False
		
		# 检查报名
		signUpObj = self.signUpList.get(guildId)
		if not signUpObj:
			if self.inSignUpTime():
				npcObj.say(who, self.getText(1002))
			else:
				npcObj.say(who, self.getText(1003))
			return False
		
		# 检查是否入场时间
		if not self.inEnterTime() and not self.inFightTime():
			if getDatePart(0, "wday") == 2:
				npcObj.say(who, self.getText(1012))
			else:
				npcObj.say(who, self.getText(1013))
			return False
		
		# 检查仙盟大战是否开启
		sceneObj = self.getSceneByGuild(guildId)
		if not sceneObj:
			npcObj.say(who, self.getText(1005))
			return False
		
		if signUpObj.isPKDone(): # 普通PK已结束，不能入场
			npcObj.say(who, self.getText(2003))
			return False
		if self.inFightTime() and who.inTeam():
			npcObj.say(who, self.getText(2004))
			return False
		
		# 检查队员
		teamObj = who.getTeamObj()
		if teamObj:
			if not teamObj.isLeader(who.id):
				npcObj.say(who, self.getText(2012))
				return False

			teamNo = signUpObj.getFightTeamNo(who.id)
			inTeamList = teamObj.getInTeamList()
			for roleId in teamObj.getMemberList():
				if not self.validEnterSceneForMember(who, roleId, npcObj, guildObj, signUpObj, teamNo):
					return False
				if roleId not in inTeamList:
					npcObj.say(who, self.getText(2013, roleId))
					return False

		return True
		
	def validEnterSceneForMember(self, who, roleId, npcObj, guildObj, signUpObj, teamNo):
		if roleId == who.id:
			memberObj = who
		else:
			memberObj = getRole(roleId)
			if not memberObj:
				return False
			if memberObj.getGuildId() != guildObj.id:
				npcObj.say(who, self.getText(2006, roleId))
				return False

		if guildObj.getJob(roleId) == GUILD_JOB_APPRENTICE:
			if roleId == who.id:
				npcObj.say(who, self.getText(2005, roleId))
			else:
				npcObj.say(who, self.getText(2007, roleId))
			return False

		memberObj = guildObj.getMember(roleId)
		if not memberObj or (getSecond() - memberObj.fetch("joinTime")) < self.configInfo["入帮时间限制"]:
			if roleId == who.id:
				npcObj.say(who, self.getText(2011, roleId))
			else:
				npcObj.say(who, self.getText(2008, roleId))
			return False
		
		if roleId != who.id:
			if teamNo and not signUpObj.getFightTeamNo(roleId):
				npcObj.say(who, self.getText(2010, roleId))
				return False
			if not teamNo and signUpObj.getFightTeamNo(roleId):
				npcObj.say(who, self.getText(2009, roleId))
				return False

		return True
		
	def enterSceneForFightTeam(self, who, signUpObj, teamNo):
		'''精英队进入
		'''
		fightTeamObj = signUpObj.getTeamObj(teamNo)
		teamObj = who.getTeamObj()
		if fightTeamObj:
			if teamObj:
				memberList = teamObj.getInTeamList()
				teamObj.release()
			else:
				memberList = [who.id]
			leaderObj = getRole(fightTeamObj.leader)
			sceneId = leaderObj.sceneId
			x = leaderObj.x
			y = leaderObj.y
			for roleId in memberList:
				memberObj = getRole(roleId)
				self.transfer(memberObj, sceneId, x, y)
				fightTeamObj.add(who)
		else:
			self.transToGameScene(who)
			if not teamObj:
				team.makeTeam(who)
		
	def messagePK(self):
		'''对手传闻
		'''
		self.log("messagePK")
		if not self.groupList: # 没有对战组
			return
		for groupNo in self.groupList:
			for pkList in self.groupList[groupNo]:
				if len(pkList) == 2:
					chatIdx = 4002
				else:
					chatIdx = 4001 
				for guildId in pkList:
					self.currentGuildId = guildId
					message.guildMessage(guildId, self.getText(chatIdx))
		
		if hasattr(self, "currentGuildId"):
			del self.currentGuildId
					
	def messageEnter(self):
		'''入场传闻
		'''
		if not self.inEnterTime():
			return
		
		timePoint = 0
		minute = getDatePart(getSecond(), "minute")
		for v in self.configInfo["入场传闻时间点"]:
			timePoint = v
			if minute < v:
				break

		if timePoint > 0:
			ti = 60 * (timePoint - minute)
			self.startTimer(self.messageEnter, ti, "messageEnter")
		
		msg = self.getText(4003)
		for groupNo in self.groupList:
			for pkList in self.groupList[groupNo]:
				for guildId in pkList:
					message.guildMessage(guildId, msg)

	def begin(self):
		'''仙盟大战正式开始
		'''
		self.log("begin")
		self.markDirty()
		self.state = STATE_FIGHT
		self.resultList = {}
		self.stopTimer("messageEnter")
		if not self.groupList:
			return
		
		self.checkGuildRelease()
		
		for sceneObj in self.getSceneListByType("gameScene"):
			for roleId in sceneObj.getRoleList():
				who = getRole(roleId)
				if not who:
					continue
				self.changeRoleInfo(roleId, "join", True) # 正常参战
				rpcActGuildFightChange(who, "timeState")
				who.getGuildObj().addMemberGuildFight(who.id)
				who.addActPoint(self.configInfo["活跃"], self.name)
				
		self.beginByPKGroup()
		
	def checkGuildRelease(self):
		'''检查帮派解散
		'''
		updated = False
		guildIdList = self.signUpList.keys()
		for guildId in guildIdList:
			guildObj = guild.getGuild(guildId)
			if guildObj:
				continue
			
			updated = True
			signUpObj = self.signUpList.pop(guildId)
			pkGuildId = signUpObj.fetch("pkGuild")
			groupNo = signUpObj.fetch("groupNo")
			pkGroupList = []
			for pkList in self.groupList[groupNo]:
				if guildId in pkList:
					if len(pkList) == 1:
						continue
					pkList = [pkGuildId]
					pkSignUpObj = self.signUpList[pkGuildId]
					pkSignUpObj.set("pkGuild", 0)
				pkGroupList.append(pkList)
				
			if pkGroupList:
				self.groupList[groupNo] = pkGroupList
			else:
				del self.groupList[groupNo]
				
			for roleObj in signUpObj.getRoleList():
				self.leaveScene(roleObj)
				
		if updated:
			self.markDirty()
				
	def resumeBegin(self):
		'''恢复仙盟大战正式开始
		'''
		if self.inFightTime() and self.state != STATE_FIGHT:
			self.begin()
	
	def end(self):
		'''仙盟大战正式结束
		'''
		self.log("end")
		self.markDirty()
		self.state = STATE_NONE
		if not self.groupList:
			return
		
		for sceneObj in self.getSceneListByType("gameScene"):
			for roleId in sceneObj.getRoleList():
				who = getRole(roleId)
				if who and who.inWar():
					who.war.end()
		
		self.endByPKGroup()
		
		ti = getattr(self, "clearTimeout", self.configInfo["清场时间"])
		self.startTimer(self.clearForEnd, ti, "clearForEnd")
				
	def resumeEnd(self):
		'''恢复结束
		'''
		if not self.inSignUpTime():
			return
		if self.state == STATE_SIGN_UP:
			return
		
		self.markDirty()
		self.state = STATE_NONE
			
	def clearForEnd(self):
		'''结束清场
		'''
		self.stopTimer("clearForEnd")
		self.roleInfoList = {}
		self.result = {}
		
		for signUpObj in self.signUpList.itervalues():
			signUpObj.init()

		for sceneObj in self.getSceneListByType("gameScene"):
			for roleId in sceneObj.getRoleList():
				who = getRole(roleId)
				if not who:
					continue
				if who.inTeam() and not who.getTeamObj().isLeader(who.id):
					continue
				self.leaveScene(who)
		self.removeSceneAll()
				
	def leaveScene(self, who):
		'''离开仙盟大战场景
		'''
		if who.inWar(): # 如果还在战斗中，结束战斗
			who.war.kickWarrior(who.warrior)

		sceneId, x, y = who.getLastRealPos()
		if not self.inEnterTime() and not self.inFightTime():
			x = -1
			y = -1
		self.transfer(who, sceneId, x, y)
		
	def getValByName(self, attrName, signUpObj=None, who=None):
		if attrName in ("roleCount", "roleCountEnemy"):
			return getValByName(signUpObj, attrName)
		if attrName == "winCountMy":
			return self.getWinCount(who)
		if attrName == "pointMy":
			return self.getPoint(who)
		if attrName in ("protectTimeout",):
			func = getattr(self, "get%s" % toTitle(attrName), None)
			return func(who)
		return getValByName(self, attrName)
		
	def getTimeState(self):
		'''仙盟大战阶段状态
		'''
		if self.inFightTime():
			return STATE_FIGHT
		if self.inEnterTime():
			return STATE_ENTER
		if self.inNoticeTime():
			return STATE_NOTICE
		return STATE_SIGN_UP
	
	def getRoleInfo(self, roleId):
		'''角色信息
		'''
		return self.roleInfoList.get(roleId)
	
	def createRoleInfo(self, who):
		'''创建角色信息
		'''
		signUpObj = self.signUpList.get(who.getGuildId())
		if not signUpObj:
			return
	
		roleId = who.id
		info = self.roleInfoList.get(roleId)
		if not info:
			teamNo = signUpObj.getFightTeamNo(who.id)
			if self.inEnterTime():
				point = self.configInfo["初始积分"]
			else:
				point = 0

			info = {
				"point": point,
				"winCount": 0, # 胜利场数
				"fightTeamNo": teamNo, # 精英队号
				"join": False, # 是否正常参战
				"protectTime": 0, # 保护时间
			}
			self.roleInfoList[roleId] = info

		return info
	
	def changeRoleInfo(self, roleId, key, val):
		'''修改角色信息
		'''
		info = self.getRoleInfo(roleId)
		if not info:
			return
		info[key] = val
		
	def getRoleInfoByKey(self, roleId, key):
		'''根据键名获取角色信息
		'''
		info = self.getRoleInfo(roleId)
		if info:
			return info.get(key, 0)
		return 0
	
	def setResult(self, guildId, result):
		'''设置对战结果
		'''
		self.resultList[guildId] = result
		
		signUpObj = self.signUpList.get(guildId)
		guildObj = signUpObj.getGuildObj()

		guildObj.guildFight.addFightCount(1)
		if result == RESULT_WIN:
			guildObj.guildFight.addWinCount(1)

		# 仙盟大战积分
		resultPoint = signUpObj.calResultPoint()
		guildObj.guildFight.addPoint(resultPoint)
			
		# 战报
		teamWinCount = signUpObj.calTeamWinCount()
		pkTeamWinCount = 0
		pkSignUpObj = self.signUpList.get(signUpObj.fetch("pkGuild"))
		if pkSignUpObj:
			pkTeamWinCount = pkSignUpObj.calTeamWinCount()
		score = (teamWinCount, pkTeamWinCount)
		signUpObj.set("score", score)
			
		teamResultList = signUpObj.getTeamResultBySort()
		
		pkResult = {
			"time": getSecond(),
			"result": resultDesc[result],
			"pkGuildName": signUpObj.getPKGuildName(),
			"score": score,
			"teamResultList": teamResultList,
		}
		guildObj.guildFight.addPKResult(pkResult)
		print "setResult", guildId, resultPoint, pkResult
	
	def addPoint(self, who, val, reason=""):
		'''增加或扣除积分
		'''
		info = self.roleInfoList.get(who.id)
		if not info:
			return

		pointOld = info["point"]
		point = pointOld + val
		if point < 0:
			point = 0
		info["point"] = point
		rpcActGuildFightChange(who, "pointMy")
		self.log("%d addPoint %d%+d->%d %s" % (who.id, pointOld, val, point, reason))
		
	def getPoint(self, who):
		'''获取个人积分
		'''
		info = self.roleInfoList.get(who.id)
		if info:
			return info["point"]
		return 0
		
	def rewardTeamPoint(self, who, point, reason):
		'''奖励队伍积分
		'''
		teamObj = who.inTeam()
		if teamObj:
			memberList = teamObj.getInTeamList()
		else:
			memberList = [who.id]
			
		if reason == "战胜":
			content = self.getText(5012)
			content = content.replace("$point", str(point))
			teamObj = who.inTeam()
			if teamObj:
				message.tips(memberList, content)
		
		for roleId in memberList:
			roleObj = getRole(roleId)
			if roleObj:
				self.addPoint(roleObj, point, reason)
		
	def costTeamPoint(self, who, point, reason=""):
		'''消耗队伍积分
		'''
		teamObj = who.inTeam()
		if teamObj:
			memberList = teamObj.getInTeamList()
		else:
			memberList = [who.id]

		if point > self.configInfo["积分扣除上限"]:
			point = self.configInfo["积分扣除上限"]
			
		if reason == "战败":
			content = self.getText(5013)
			content = content.replace("$point", str(point))
			message.tips(memberList, content)
		
		for roleId in memberList:
			roleObj = getRole(roleId)
			if roleObj:
				self.addPoint(roleObj, -point, reason)
				
	def checkTeamPoint(self, who):
		'''检查队伍积分
		'''
		teamObj = who.inTeam()
		if teamObj:
			memberList = teamObj.getInTeamList()
		else:
			memberList = [who.id]
		
		for roleId in memberList:
			roleObj = getRole(roleId)
			if not roleObj:
				continue
			if self.getPoint(roleObj) > 0:
				continue
			message.tips(roleObj, self.getText(5010))
			if teamObj:
				teamObj.remove(roleId)
				message.tips(teamObj.getInTeamList(), self.getText(5011, roleId))

	def getProtectTimeout(self, who):
		'''剩余保护时间
		'''
		info = self.roleInfoList.get(who.id)
		protectTime = info["protectTime"]
		if protectTime > 0:
			return max(0, protectTime - getSecond())
		return 0
	
	def cancelProtect(self, who):
		'''取消保护
		'''
		teamObj = who.inTeam()
		if teamObj:
			memberList = teamObj.getInTeamList()
		else:
			memberList = [who.id]
		
		for roleId in memberList:
			roleObj = getRole(roleId)
			if not roleObj:
				continue
			self.changeRoleInfo(roleId, "protectTime", 0)
			rpcActGuildFightChange(roleObj, "protectTimeout")
			
	def addWinCount(self, who, val):
		'''增加个人胜利场数
		'''
		info = self.roleInfoList.get(who.id)
		if not info:
			return

		winCountOld = info["winCount"]
		winCount = winCountOld + val
		info["winCount"] = winCount
		rpcActGuildFightChange(who, "winCountMy")
		self.log("%d addWinCount %d%+d->%d" % (who.id, winCountOld, val, winCount))
		
	def addTeamWinCount(self, who, val):
		'''奖励队伍积分
		'''
		teamObj = who.inTeam()
		if teamObj:
			memberList = teamObj.getInTeamList()
		else:
			memberList = [who.id]
		
		for roleId in memberList:
			roleObj = getRole(roleId)
			if roleObj:
				self.addWinCount(who, val)
		
	def getWinCount(self, who):
		info = self.roleInfoList.get(who.id)
		if info:
			return info["winCount"]
		return 0
	
	def transString(self, content, pid=0):
		if hasattr(self, "currentGuildId"):
			signUpObj = self.signUpList.get(self.currentGuildId)
			if signUpObj:
				if "$enemy" in content:
					pkGuildId = signUpObj.fetch("pkGuild")
					pkGuildObj = guild.getGuild(pkGuildId)
					if pkGuildObj:
						pkGuildName = pkGuildObj.name
						content = content.replace("$enemy", pkGuildName)
				if "$score" in content:
					content = content.replace("$score", signUpObj.getScoreDesc())
						
		if "$enterTime" in content:
			timeNow = getSecond()
			datePart = getDatePart()
			year = datePart["year"]
			month = datePart["month"]
			day = datePart["day"]
			timeBegin = getSecond(year, month, day, 20)
			ti = max(0, timeBegin - timeNow)
			content = content.replace("$enterTime", formatTime(ti))
		
		who = getRole(pid)
		if who:
			if "$protectTimeout" in content:
				ti = self.getProtectTimeout(who)
				content = content.replace("$protectTimeout", str(ti))
			
		return customActivity.transString(self, content, pid=pid)
	
	def transNpcInfo(self, npcIdx, info, who=None):
		'''转化Npc信息
		'''
		pos = info["位置"]
		if "$curScene" in pos:
			pos = pos.replace("$curScene", str(self.currentSceneId))
			info["位置"] = pos
		return customActivity.transNpcInfo(self, npcIdx, info, who)
	
	def customEvent(self, who, npcObj, eventName):
		if eventName == "box": # 开宝箱
			self.openBox(who, npcObj)
			
	def openBox(self, who, npcObj):
		'''开宝箱
		'''
		signUpObj = self.signUpList.get(who.getGuildId())
		if not signUpObj:
			return
		if self.getRoleInfoByKey(who.id, "teamNo"):
			message.tips(who, self.getText(2001))
			return
		if not self.getRoleInfoByKey(who.id, "join"):
			message.tips(who, self.getText(2002))
			return
		self.log("%d openBox" % who.id)
		self.removeNpc(npcObj)
		self.reward(who, self.configInfo["开宝箱奖励"])
	
	def beginByPKGroup(self):
		'''根据对战组开始
		'''
		self.log("beginByPKGroup")
		for groupNo in self.groupList:
			for pkList in self.groupList[groupNo]:
				guildIdA = pkList[0]
				signUpObjA = self.signUpList[guildIdA]
				roleCountA = signUpObjA.getRoleCount()
				signUpObjA.set("beginRoleCount", roleCountA)

				if len(pkList) == 1: # 轮空
					signUpObjA.teamWinAll()
					signUpObjA.setResult(RESULT_WIN)
					self.guildPKEnd(guildIdA)
					continue

				guildIdB = pkList[1]
				signUpObjB = self.signUpList[guildIdB]
				roleCountB = signUpObjB.getRoleCount()
				signUpObjB.set("beginRoleCount", roleCountB)
				
				if roleCountA == 0 and roleCountB == 0: # 普通场平局
					signUpObjA.setResult(RESULT_DRAW)
					signUpObjB.setResult(RESULT_DRAW)
				elif roleCountA == 0:
					signUpObjA.setResult(RESULT_FAIL)
					signUpObjB.setResult(RESULT_WIN)
				elif roleCountB == 0:
					signUpObjA.setResult(RESULT_WIN)
					signUpObjB.setResult(RESULT_FAIL)
				
				self.randTeamPK(signUpObjA, signUpObjB)
				self.checkGuildPKEnd(guildIdA, guildIdB)
	
	def endByPKGroup(self):
		'''根据对战组结束
		'''
		self.log("endByPKGroup")
		for groupNo in self.groupList:
			for pkList in self.groupList[groupNo]:
				if len(pkList) == 1: # 轮空
					continue
				
				guildIdA = pkList[0]
				signUpObjA = self.signUpList[guildIdA]
				roleCountA = signUpObjA.getRoleCount()

				guildIdB = pkList[1]
				signUpObjB = self.signUpList[guildIdB]
				roleCountB = signUpObjB.getRoleCount()
				
				result = RESULT_DRAW
				if roleCountA > roleCountB:
					result = RESULT_WIN
				elif roleCountA < roleCountB:
					result = RESULT_FAIL
				else:
					pointA = signUpObjA.calAllRolePoint()
					pointB = signUpObjB.calAllRolePoint()
					if pointA > pointB:
						result = RESULT_WIN
					elif pointA < pointB:
						result = RESULT_FAIL
						
				if result == RESULT_WIN:
					signUpObjA.setResult(RESULT_WIN)
					signUpObjB.setResult(RESULT_FAIL)
				elif result == RESULT_FAIL:
					signUpObjA.setResult(RESULT_FAIL)
					signUpObjB.setResult(RESULT_WIN)
				else:
					signUpObjA.setResult(RESULT_DRAW)
					signUpObjB.setResult(RESULT_DRAW)

				self.checkGuildPKEnd(guildIdA, guildIdB)

	def tryPK(self, who, targetId):
		'''尝试普通PK
		'''
		targetObj = getRole(targetId)
		if not targetObj:
			return
		if not self.validPK(self, who, targetObj):
			return
		
		if who.inTeam():
			roleCount = len(who.getTeamObj().getInTeamList())
		else:
			roleCount = 1
		if targetObj.inTeam():
			targetRoleCount = len(targetObj.getTeamObj().getInTeamList())
		else:
			targetRoleCount = 1
		
		point = self.configInfo["点人扣除积分"] * targetRoleCount
		perPoint = point / roleCount
		if not self.validCostPoint(who, perPoint):
			return
		self.costTeamPoint(who, perPoint, "点人")
		self.cancelProtect(who)

		content = self.getText(5009)
		content = content.replace("$point", str(perPoint))
		message.tips(who, content)

		warObj = war.warctrl.createPKWar(who, targetObj, self, None)
		warObj.pkInfo = {
			TEAM_SIDE_1: {
				"roleId": who.id,
				"name": who.name,
				"guildId": who.getGuildId(),
				"roleCount": roleCount,
			},
			TEAM_SIDE_2: {
				"roleId": targetObj.id,
				"name": targetObj.name,
				"guildId": targetObj.getGuildId(),
				"roleCount": targetRoleCount
			},
		}
		
	def validPK(self, who, targetObj):
		'''检验PK
		'''
		guildId = who.getGuildId()

		if who.inWar():
			return False
		if not self.getRoleInfoByKey(who.id, "join"):
			return False
		if self.getRoleInfoByKey(who.id, "fightTeamNo"):
			return False
		if not self.inFightTime():
			return False
		if guildId in self.resultList: # 已分胜负
			return False
		if self.getPoint(who) <= 0:
			message.tips(who, self.getText(5002))
			return False

		if targetObj.getGuildId() == guildId:
			return False
		if self.getPoint(targetObj) <= 0:
			message.tips(who, self.getText(5007))
			return False
		if self.getRoleInfoByKey(targetObj.id, "fightTeamNo"):
			message.tips(who, self.getText(5005))
			return False
		if targetObj.inWar():
			message.tips(who, self.getText(5006))
			return False
		if self.getProtectTimeout(targetObj) > 0:
			message.tips(who, self.getText(5008, targetObj.id))
			return False
		
		return True
		
	def validCostPoint(self, who, point):
		'''检查消耗积分
		'''
		teamObj = who.inTeam()
		if teamObj:
			memberList = teamObj.getInTeamList()
		else:
			memberList = [who.id]

		for roleId in memberList:
			roleObj = getRole(roleId)
			if not roleObj:
				continue
			if self.getPoint(roleObj) >= point:
				continue
			if roleId == who.id:
				message.tips(who, self.getText(5004))
			else:
				message.tips(memberList, self.getText(5003, roleId))
			return False
		return True
					
	def randTeamPK(self, signUpObjA, signUpObjB):
		'''精英队随机配对PK
		'''
		print "randTeamPK", signUpObjA.guildId, signUpObjB.guildId
		teamListA = []
		teamListB = []
		for teamNo in xrange(1, 4):
			teamObjA = signUpObjA.getTeamObj(teamNo)
			teamObjB = signUpObjB.getTeamObj(teamNo)
			if teamObjA:
				teamListA.append(teamObjA)
				teamObjA.guildFightTeamNo = teamNo
			else:
				signUpObjA.setTeamResult(teamNo, RESULT_FAIL)

			if teamObjB:
				teamListB.append(teamObjB)
				teamObjB.guildFightTeamNo = teamNo
			else:
				signUpObjB.setTeamResult(teamNo, RESULT_FAIL)
				
		teamListA = shuffleList(teamListA)
		teamListB = shuffleList(teamListB)
		teamGroupList = map(None, teamListA, teamListB)
		for teamObjA, teamObjB in teamGroupList:
			if teamObjA and teamObjB: # 配对成功
				self.doTeamPK(teamObjA, teamObjB)
			elif teamObjA: # 轮空
				teamNo = teamObjA.guildFightTeamNo
				signUpObjA.setTeamResult(teamNo, RESULT_WIN)
			elif teamObjB: # 轮空
				teamNo = teamObjB.guildFightTeamNo
				signUpObjB.setTeamResult(teamNo, RESULT_WIN)
				
	def doTeamPK(self, teamObjA, teamObjB):
		'''精英队PK
		'''
		print "doTeamPK", teamObjA.leader, teamObjB.leader
		leaderA = getRole(teamObjA.leader)
		leaderB = getRole(teamObjB.leader)
		warObj = war.warctrl.createPKWar(leaderA, leaderB, self, None)
		if not warObj:
			return
		warObj.teamPK = True
		warObj.pkInfo = {
			TEAM_SIDE_1: {
				"roleId": leaderA.id,
				"name": leaderA.name,
				"guildId": leaderA.getGuildId(),
				"teamNo": teamObjA.guildFightTeamNo,
			},
			TEAM_SIDE_2: {
				"roleId": leaderB.id,
				"name": leaderB.name,
				"guildId": leaderB.getGuildId(),
				"teamNo": teamObjB.guildFightTeamNo,
			},
		}
		
	def customCheckBoutLimit(self, warObj):
		if hasattr(warObj, "teamPK"): # 精英场不限回合
			return False
		if warObj.bout < self.configInfo["回合上限"]:
			return False
		
		leaderA = warObj.pkInfo[TEAM_SIDE_1]["roleId"]
		leaderB = warObj.pkInfo[TEAM_SIDE_2]["roleId"]
		
		data = {
			TEAM_SIDE_1: [0, 0, -leaderA],
			TEAM_SIDE_2: [0, 0, -leaderB],
		}

		for side in warObj.teamList:
			for w in warObj.teamList[side].values():
				if w.isRole() or w.isPet() or w.isBuddy():
					data[side][0] += 1
					data[side][1] += w.hp
		
		if data[TEAM_SIDE_1] > data[TEAM_SIDE_2]:
			winner = TEAM_SIDE_1
		else:
			winner = TEAM_SIDE_2
		warObj.isEnd = True
		warObj.winner = winner
			
		return True
	
	def setupWar(self, warObj, who, npcObj):
		warObj.noLost = True
	
	def warWin(self, warObj, npcObj, warriorList):
		if self.inFightTime():
			customActivity.warWin(self, warObj, npcObj, warriorList)
			return
	
		# 开战期结束的都算战败
		for w in warriorList:
			if not w.isRole():
				continue
			who = getRole(w.id)
			if not who:
				continue
			self.onWarFail(warObj, npcObj, w)
			break
		
	def onWarWin(self, warObj, npcObj, w):
		'''战斗胜利时
		'''
		who = getRole(w.id)
		if not who:
			return
		signUpObj = self.signUpList.get(who.getGuildId())
		if not signUpObj:
			return

		pkInfo = warObj.pkInfo[w.side]
		if hasattr(warObj, "teamPK"):
			self.onWarWinForTeamPK(who, pkInfo, signUpObj)
		else:
			self.onWarWinForPK(who, pkInfo, signUpObj)
	
	def onWarFail(self, warObj, npcObj, w):
		'''战斗失败时
		'''
		who = getRole(w.id)
		if not who:
			return
		signUpObj = self.signUpList.get(who.getGuildId())
		if not signUpObj:
			return
		
		pkInfo = warObj.pkInfo[w.side]
		if hasattr(warObj, "teamPK"):
			self.onWarFailForTeamPK(who, pkInfo, signUpObj)
		else:
			self.onWarFailForPK(who, pkInfo, signUpObj)
		
	def onWarWinForTeamPK(self, who, pkInfo, signUpObj):
		'''精英队PK胜利
		'''
		print "onWarWinForTeamPK", who.getGuildId()
		teamNo = signUpObj.getFightTeamNo(who.id)
		signUpObj.setTeamResult(teamNo, RESULT_WIN)
	
	def onWarFailForTeamPK(self, who, pkInfo, signUpObj):
		'''精英队PK失败
		'''
		if pkInfo["roleId"] != who.id:
			return
		print "onWarFailForTeamPK", who.getGuildId()
		teamNo = signUpObj.getFightTeamNo(who.id)
		signUpObj.setTeamResult(teamNo, RESULT_FAIL)
		
	def onWarWinForPK(self, who, pkInfo, signUpObj):
		'''普通PK胜利
		'''
		print "onWarWinForPK", who.getGuildId()
		signUpObj.addWinCount(1)
		
		point = self.configInfo["胜利积分"]
		self.rewardTeamPoint(who, point, "战胜")
		self.addTeamWinCount(who, 1)
	
	def onWarFailForPK(self, who, pkInfo, signUpObj):
		'''普通PK失败
		'''
		if pkInfo["roleId"] != who.id:
			return
		print "onWarFailForPK", who.getGuildId()
		point = self.configInfo["失败扣除积分"] / pkInfo["roleCount"]
		self.costTeamPoint(who, point, "战败")
		
		teamObj = who.inTeam()
		if teamObj:
			memberList = teamObj.getInTeamList()
		else:
			memberList = [who.id]
			
		protectTime = getSecond() + self.configInfo["保护时间"]
		
		for roleId in memberList:
			roleObj = getRole(roleId)
			if not roleObj:
				continue
			if self.getPoint(roleObj) > 0:
				self.changeRoleInfo(roleId, "protectTime", protectTime)
				rpcActGuildFightChange(roleObj, "protectTimeout")
			else:
				message.tips(roleObj, self.getText(5010))
				if teamObj:
					teamObj.remove(roleId)
					message.tips(teamObj.getInTeamList(), self.getText(5011, roleId))
			
	def warEnd(self, warObj, npcObj):
		print "warEnd"		
		guildIdA = warObj.pkInfo[TEAM_SIDE_1]["guildId"]
		guildIdB = warObj.pkInfo[TEAM_SIDE_2]["guildId"]
		signUpObjA = self.signUpList.get(guildIdA)
		signUpObjB = self.signUpList.get(guildIdB)
		if not signUpObjA or not signUpObjB:
			return
		
		if hasattr(warObj, "teamPK"):
			pass
		else:
			if signUpObjA.getRoleCount() == 0:
				signUpObjA.setResult(RESULT_FAIL)
			if signUpObjB.getRoleCount() == 0:
				signUpObjA.setResult(RESULT_FAIL)
		
		self.checkGuildPKEnd(guildIdA, guildIdB)
	
	def checkGuildPKEnd(self, guildIdA, guildIdB):
		'''检查帮派PK是否结束
		'''
		signUpObjA = self.signUpList[guildIdA]
		signUpObjB = self.signUpList[guildIdB]
		if not signUpObjA.isTeamPKDone() or not signUpObjB.isTeamPKDone():
			print "not isTeamPKDone"
			return
		if not signUpObjA.isPKDone() or not signUpObjB.isPKDone():
			print "not isPKDone"
			return

		winCountA = signUpObjA.calTeamWinCount()
		winCountB = signUpObjB.calTeamWinCount()
		if winCountA > winCountB:
			self.guildPKEnd(guildIdA, guildIdB)
		elif winCountA < winCountB:
			self.guildPKEnd(guildIdB, guildIdA)
		elif signUpObjA.result == RESULT_WIN:
			self.guildPKEnd(guildIdA, guildIdB)
		elif signUpObjB.result == RESULT_WIN:
			self.guildPKEnd(guildIdB, guildIdA)
		else:
			guildObjList = [signUpObjA.getGuildObj(), signUpObjB.getGuildObj()]
			guildObjList.sort(key=self._sortKeyForGroup, reverse=True)
			self.guildPKEnd(guildObjList[0], guildObjList[1])
			
	def guildPKEnd(self, guildIdA, guildIdB=0):
		self.log("%d guildPKWin %s" % (guildIdA, guildIdB))
		self.guildPKWin(guildIdA, guildIdB)
		if guildIdB:
			self.guildPKFail(guildIdB, guildIdA)
		
		guildObjA = guild.getGuild(guildIdA)
		if guildIdB:
			guildObjB = guild.getGuild(guildIdB)
			content = self.getText(6008)
			content = content.replace("$guildFail", guildObjB.name)
		else:
			content = self.getText(6009)
		content = content.replace("$guildWin", guildObjA.name)
		message.worldMessage(content)
	
	def guildPKWin(self, guildId, pkGuildId=0):
		'''对战胜利
		'''
		self.setResult(guildId, RESULT_WIN)
		signUpObj = self.signUpList[guildId]
		guildObj = signUpObj.getGuildObj()
		guildFund = self.configInfo["胜利奖励资金"]
		guildObj.addFund(guildFund, "仙盟大战胜利")
		
		self.currentGuildId = guildId
		if pkGuildId:
			message.guildMessage(guildId, self.getText(6005))
		else:
			message.guildMessage(guildId, self.getText(6007))

		for roleObj in signUpObj.getRoleList():
			message.tips(roleObj, self.getText(4005))
		
		for memberId in guildObj.memberList:
			if self.getRoleInfoByKey(memberId, "join"):
				content = self.getText(6001)
			else:
				content = self.getText(6003)
			content = content.replace("$guildFund", str(guildFund))
			mail.sendGuildMail(memberId, "仙盟大战", content)

		listenerGuidePKAchv(guildId)
	
	def guildPKFail(self, guildId, pkGuildId):
		'''对战失败
		'''
		self.setResult(guildId, RESULT_FAIL)
		signUpObj = self.signUpList[guildId]
		guildObj = signUpObj.getGuildObj()
		
		guildFund = self.configInfo["失败奖励资金"]
		guildObj.addFund(guildFund, "仙盟大战失败")
		
		self.currentGuildId = guildId
		message.guildMessage(guildId, self.getText(6006))

		for roleObj in signUpObj.getRoleList():
			message.tips(roleObj, self.getText(4006))
			if roleObj.inTeam() and not roleObj.getTeamObj().isLeader(roleObj.id):
				continue
			
		for memberId in guildObj.memberList:
			if self.getRoleInfoByKey(memberId, "join"):
				content = self.getText(6002)
			else:
				content = self.getText(6004)
			content = content.replace("$guildFund", str(guildFund))
			mail.sendGuildMail(memberId, "仙盟大战", content)
		
# 	def guildPKDraw(self, guildId, pkGuildId):
# 		'''对战平局
# 		'''
# 		self.log("%d guildPKDraw %s" % (guildId, pkGuildId))
# 		self.setResult(guildId, RESULT_DRAW)
		
	def refreshBox(self, guildId):
		'''刷宝箱
		'''
		signUpObj = self.signUpList.get(guildId)
		if not signUpObj:
			return
		
		roleCount = signUpObj.fetch("beginRoleCount")
		signUpObjPK = self.signUpList.get(signUpObj.fetch("pkGuild"))
		if signUpObjPK:
			roleCount += signUpObjPK.fetch("beginRoleCount")
			
		countStr = self.configInfo["宝箱数"]
		countStr = countStr.replace("CNT", str(roleCount))
		count = eval(countStr)
		
		sceneObj = self.getSceneByGuild(guildId)
		self.currentSceneId = sceneObj.id		
		for i in xrange(count):
			npcObj = self.addNpc(1001, "box")
			npcObj.eventIdx = 1001
		
		self.log("%d refreshBox %d" % (guildId, count))
		if count > 0:
			message.guildMessage(guildId, self.getText(4004))

	def testCmd(self, who, cmdIdx, *args):
		if cmdIdx == 100:
			txtList = []
			txtList.append("101-设置入场时间")
			txtList.append("102-设置清场时间")
			txtList.append("201-结束")
			txtList.append("202-清场")
			txtList.append("301-进场")
			txtList.append("302-公示开始")
			txtList.append("401-查看状态")
			message.dialog(who, "\n".join(txtList))
		elif cmdIdx == 101:
			try:
				ti = int(args[0])
			except:
				message.tips(who, "参数：时间(秒)")
				return
			if ti > 0:
				self.enterTimeout = ti
				message.tips(who, "设置入场时间为%d秒" % ti)
			elif hasattr(self, "enterTimeout"):
				del self.enterTimeout
				message.tips(who, "恢复入场时间为%d秒" % self.configInfo["入场时间"])
		elif cmdIdx == 102:
			try:
				ti = int(args[0])
			except:
				message.tips(who, "参数：时间(秒)")
				return
			if ti > 0:
				self.clearTimeout = ti
				message.tips(who, "设置清场时间为%d秒" % ti)
			elif hasattr(self, "clearTimeout"):
				del self.clearTimeout
				message.tips(who, "恢复清场时间为%d秒" % self.configInfo["清场时间"])
		elif cmdIdx == 201:
			self.end()
		elif cmdIdx == 202:
			self.clearForEnd()
		elif cmdIdx == 301:
			import npc
			npcObj = npc.newByIdx(10101)
			self.enterScene(who, npcObj)
		elif cmdIdx == 302:
			self.noticeBegin()
		elif cmdIdx == 401:
			txtList = []
			txtList.append("状态:%s" % self.state)
			message.tips(who, "\n".join(txtList))
		elif cmdIdx == 501:
			guildId = who.getGuildId()
			if not guildId:
				message.tips(who, "你加入仙盟")
				return
			listenerGuidePKAchv(guildId)

import pst		
class SignUp(pst.cEasyPersist):
	'''报名对象
	'''
	
	def __init__(self, guildId, gameObj, dirtyEventHandler):
		pst.cEasyPersist.__init__(self, dirtyEventHandler)
		self.guildId = guildId
		self.gameObj = gameObj
		self.result = 0 # 普通场结果
		self.teamResult = {1:0, 2:0, 3:0} # 精英队结果, 0.激战中 1.胜利 2.失败 3.平局

		# 仙盟大战精英
		self.fightTeam = {
			1: [], # 精英一队
			2: [], # 精英二队
			3: [], # 精英三队
		}
		
	def save(self):
		data = pst.cEasyPersist.save(self)
		data["result"] = self.result
		data["teamResult"] = self.teamResult
		data["fightTeam"] = self.fightTeam
		return data
	
	def load(self, data):
		if not data:
			return
		pst.cEasyPersist.load(self, data)
		self.result = data["result"]
		self.teamResult = data["teamResult"]
		self.fightTeam = data["fightTeam"]
		
	def init(self):
		'''重新初始化
		'''
		self.markDirty()
		self.result = 0
		self.teamResult = {1:0, 2:0, 3:0}
		
	def getGuildObj(self):
		return guild.getGuild(self.guildId)
	
	def getPKGuildObj(self):
		return guild.getGuild(self.fetch("pkGuild"))

	def getPKGuildName(self):
		guildObj = self.getPKGuildObj()
		if guildObj:
			return guildObj.name
		return ""

	def getRoleList(self):
		'''获取本帮成员
		'''
		sceneObj = self.gameObj.getSceneByGuild(self.guildId)
		for roleId in sceneObj.getRoleList():
			roleObj = getRole(roleId)
			if not roleObj:
				continue
			if roleObj.getGuildId() != self.guildId:
				continue
			yield roleObj
			
	def getTeamRoleList(self):
		'''获取精英队的本帮成员
		'''
		roleList = []
		for roleObj in self.getRoleList():
			if self.getFightTeamNo(roleObj.id):
				roleList.append(roleObj)
				
		return roleList
	
	def getRoleCount(self):
		'''计算普通成员人数
		'''
		count = 0
		for who in self.getRoleList():
			if self.getFightTeamNo(who.id): # 精英队不算人数
				continue
			if self.gameObj.getPoint(who) <= 0:
				continue
			count += 1
		return count
	
	def getRoleCountEnemy(self):
		'''计算敌方普通成员人数
		'''
		pkSignUpObj = self.gameObj.signUpList.get(self.fetch("pkGuild"))
		if pkSignUpObj:
			return pkSignUpObj.getRoleCount()
		return 0
	
	def calAllRolePoint(self):
		'''统计普通成员总积分
		'''
		point = 0
		for who in self.getRoleList():
			if self.getFightTeamNo(who.id): # 精英队不算人数
				continue
			point += self.gameObj.getPoint(who)
		return point
	
	def refreshInfo(self, *attrNameList):
		'''刷新仙盟大战公共信息
		'''
		msg = {}
		for attrName in attrNameList:
			msg[attrName] = self.gameObj.getValByName(attrName, self)
		for who in self.getRoleList():
			who.endPoint.rpcActGuildFightChange(**msg)

	def getFightTeamNo(self, roleId):
		'''获取玩家在仙盟大战精英队中的队号
		'''
		for teamNo, memberList in self.fightTeam.iteritems():
			if roleId in memberList:
				return teamNo
		return 0
			
	def getTeamObj(self, teamNo):
		'''获取指定精英组的队伍
		'''
		for roleObj in self.getRoleList():
			teamObj = roleObj.getTeamObj()
			if not teamObj:
				continue
			if teamNo != self.getFightTeamNo(roleObj.id):
				continue
			return teamObj
		return None
	
	def getTeamResultBySort(self):
		'''获取精英队结果
		'''
		resultList = []
		teamNoList = self.teamResult.keys()
		teamNoList.sort()
		for teamNo in teamNoList:
			resultList.append(self.teamResult[teamNo])
		return resultList
	
	def teamWinAll(self):
		'''精英队全胜
		'''
		self.markDirty()
		for teamNo in self.teamResult:
			self.teamResult[teamNo] = RESULT_WIN
		self.gameObj.log("%s teamResult all %s" % (self.guildId, RESULT_WIN))
			
	def teamFailAll(self):
		'''精英队全败
		'''
		self.markDirty()
		for teamNo in self.teamResult:
			self.teamResult[teamNo] = RESULT_FAIL
		self.gameObj.log("%s teamResult all %s" % (self.guildId, RESULT_FAIL))
			
	def teamDrawAll(self):
		'''精英队全平局
		'''
		self.markDirty()
		for teamNo in self.teamResult:
			self.teamResult[teamNo] = RESULT_DRAW
		self.gameObj.log("%s teamResult all %s" % (self.guildId, RESULT_DRAW))
			
	def setTeamResult(self, teamNo, result):
		'''设置单个精英队结果
		'''
		self.markDirty()
		self.teamResult[teamNo] = result
		self.gameObj.log("%s teamResult %s %s" % (self.guildId, teamNo, result))
		
	def isTeamPKDone(self):
		'''精英队PK是否结束
		'''
		for result in self.teamResult.itervalues():
			if result == RESULT_NONE:
				return False
		return True
	
	def setResult(self, result):
		'''设置普通场结果
		'''
		gameObj = self.gameObj
		self.markDirty()
		self.result = result
		gameObj.log("%s result %s" % (self.guildId, result))

		if result == RESULT_WIN:
			ti = gameObj.configInfo["刷宝箱时间"]
			flag = "refreshBox%s" % self.guildId
			gameObj.startTimer(functor(gameObj.refreshBox, self.guildId), ti, flag)
		elif result == RESULT_FAIL:
			for roleObj in self.getRoleList():
				message.tips(roleObj, gameObj.getText(4006))
				if roleObj.inTeam() and not roleObj.getTeamObj().isLeader(roleObj.id):
					continue
				gameObj.leaveScene(roleObj)
	
	def isPKDone(self):
		'''普通PK是否结束
		'''
		if self.result == RESULT_NONE:
			return False
		return True
		
	def calTeamWinCount(self):
		'''计算精英队胜利数
		'''
		count = 0
		for result in self.teamResult.itervalues():
			if result == RESULT_WIN:
				count += 1
		return count

	def addWinCount(self, val):
		'''增加胜利场数
		'''
		self.add("winCount", val)
		self.gameObj.log("%s winCount %s" % (self.guildId, self.fetch("winCount")))
	
	def getWinCount(self):
		'''胜利场数
		'''
		return self.fetch("winCount")
	
	def getScoreDesc(self):
		score = self.fetch("score")
		if not score:
			return "0:0"
		return "%d:%d" % (score[0], score[1])
	
	def calResultPoint(self):
		'''计算仙盟大战积分
		'''
		point = 0
		for result in self.teamResult.itervalues():
			if result == RESULT_WIN:
				point += self.gameObj.configInfo["精英队胜利积分"]
			elif result == RESULT_DRAW:
				point += self.gameObj.configInfo["精英队平局积分"]
		return point

def getActivity():
	return activity.getActivity("guildFight")

def onEnter(who, oldScene, newScene):
	'''进入活动场景时
	'''
	print "onEnter", oldScene.id, newScene.id
	guildObj = who.getGuildObj()
	if not guildObj:
		return

	actObj = getActivity()
	signUpObj = actObj.signUpList.get(guildObj.id)
	if not signUpObj:
		return
	
	pkSignUpObj = actObj.signUpList.get(signUpObj.fetch("pkGuild"))
	who.signUp = signUpObj
	who.pkSignUp = pkSignUpObj

	actObj.createRoleInfo(who)
	rpcActGuildFightEnter(who)
	
	point = actObj.getRoleInfoByKey(who.id, "point")
	if point:
		signUpObj.refreshInfo("roleCount")
		if pkSignUpObj:
			pkSignUpObj.refreshInfo("roleCountEnemy")

def onLeave(who, oldScene, newScene):
	'''离开活动场景时
	'''
	print "onLeave", oldScene.id, newScene.id
	if oldScene is newScene:
		return
	
	guildObj = who.getGuildObj()
	if not guildObj:
		return
	
	actObj = getActivity()
	signUpObj = actObj.signUpList.get(guildObj.id)
	if not signUpObj:
		return
	
	point = actObj.getRoleInfoByKey(who.id, "point")
	actObj.changeRoleInfo(who.id, "point", 0)
	if hasattr(who, "signUp"):
		del who.signUp
	if hasattr(who, "pkSignUp"):
		del who.pkSignUp

	rpcActGuildFightQuit(who)

	if point:
		signUpObj.refreshInfo("roleCount")
		pkSignUpObj = actObj.signUpList.get(signUpObj.fetch("pkGuild"))	
		if pkSignUpObj:
			pkSignUpObj.refreshInfo("roleCountEnemy")


def listenerGuidePKAchv(guildId):
	'''仙盟战胜利,触发达成成就,只触发在线的
	'''
	guildObj = guild.getGuild(guildId)
	if not guildObj:
		return
	for memberId in guildObj.memberList:
		roleObj = getRole(memberId)
		if not roleObj:
			continue
		listener.doListen("仙盟战胜利", roleObj)

# ================================================================
# 客户端发往服务端
# ================================================================
def validReceive(func):
	'''检查接收数据
	'''
	def _func(who, reqMsg):
# 		print "\nvalidReceive", func.__name__, str(reqMsg).replace("\n", ",")
		guildObj = who.getGuildObj()
		if not guildObj:
			return
		actObj = getActivity()
		if not actObj:
			return
		if not actObj.inGameScene(who):
			return
		func(guildObj, actObj, who, reqMsg)
	return _func

@validReceive
def rpcActGuildFightTeamRequest(guildObj, actObj, who, reqMsg):
	'''请求仙盟大战精英队
	'''
	rpcActGuildFightTeam(who)

@validReceive
def rpcActGuildFightQuitRequest(guildObj, actObj, who, reqMsg):
	'''请求退出仙盟大战
	'''
	content = actObj.getText(1017)
	if actObj.inFightTime():
		signUpObj = actObj.signUpList.get(guildObj.id)
		if signUpObj and not signUpObj.isPKDone() and actObj.getPoint(who.id) > 0:
			content = actObj.getText(1016)
		
	message.confirmBoxNew(who, responseLeaveScene, content)
	
def responseLeaveScene(who, yes):
	if not yes:
		return
	actObj = activity.getActivity("guildFight")
	actObj.leaveScene(who)

@validReceive
def rpcActGuildFightResultRequest(guildObj, actObj, who, reqMsg):
	'''请求战况数据
	'''
	rpcActGuildFightResult(who)
	
@validReceive
def rpcActGuildFightPK(guildObj, actObj, who, reqMsg):
	'''点击玩家PK
	'''
	targetId = reqMsg.iValue
	if not targetId:
		return
	actObj.tryPK(who, targetId)



#===============================================================================
# 服务端发往客户端
#===============================================================================
def validSend(func):
	'''检查发送数据
	'''
	def _func(who, *args, **kwargs):
# 		print "\nvalidSend", func.__name__, "roleId:%d" % who.id, args, kwargs
		guildObj = who.getGuildObj()
		if not guildObj:
			return
		actObj = getActivity()
		if not actObj:
			return
		if not actObj.inGameScene(who):
			return
		signUpObj = actObj.signUpList.get(guildObj.id)
		if not signUpObj:
			return
		func(guildObj, actObj, signUpObj, who, *args, **kwargs)
	return _func

@validSend
def rpcActGuildFightEnter(guildObj, actObj, signUpObj, who):
	'''进入仙盟大战
	'''
	msgObj = packetBaseInfo(guildObj, actObj, signUpObj, who)
	who.endPoint.rpcActGuildFightEnter(msgObj)
	print "\nrpcActGuildFightEnter", "roleId:%s" % who.id, msgObj
	
def packetBaseInfo(guildObj, actObj, signUpObj, who):
	'''仙盟大战基础信息
	'''
	timeState = actObj.getTimeState()
	if signUpObj.getFightTeamNo(who.id):
		isTeamMember = True
	else:
		isTeamMember = False
	roleCount = signUpObj.getRoleCount()
	roleCountEnemy = 0
	guildNameEnemy = ""
	
	pkGuildId = signUpObj.fetch("pkGuild")
	if pkGuildId:
		pkSignUpObj = actObj.signUpList.get(pkGuildId)
		if pkSignUpObj:
			roleCountEnemy = pkSignUpObj.getRoleCount()
		pkGuildObj = guild.getGuild(pkGuildId)
		if pkGuildObj:
			guildNameEnemy = pkGuildObj.name
		
	msgObj = act_guildFight_pb2.baseInfo()
	msgObj.timeState = timeState
	msgObj.guildNameEnemy = guildNameEnemy
	msgObj.roleCount = roleCount
	msgObj.roleCountEnemy = roleCountEnemy
	msgObj.protectTimeout = actObj.getProtectTimeout(who)
	msgObj.pointMy = actObj.getPoint(who)
	msgObj.winCountMy = actObj.getWinCount(who)
	msgObj.isTeamMember = isTeamMember
	return msgObj

@validSend
def rpcActGuildFightChange(guildObj, actObj, signUpObj, who, *attrNameList):
	'''修改仙盟大战数据
	'''
	msg = {}
	for attrName in attrNameList:
		msg[attrName] = actObj.getValByName(attrName, signUpObj, who)
	who.endPoint.rpcActGuildFightChange(**msg)
	print "\nrpcActGuildFightChange", "roleId:%s" % who.id, msg

@validSend
def rpcActGuildFightQuit(guildObj, actObj, signUpObj, who):
	'''退出仙盟大战，清除仙盟大战相关界面和数据
	'''	
	who.endPoint.rpcActGuildFightQuit()

@validSend
def rpcActGuildFightTeam(guildObj, actObj, signUpObj, who):
	'''仙盟大战精英队
	'''
	memberMsgList = []
	for teamNo, memberList in signUpObj.fightTeam.iteritems():
		for memberId in memberList:
			memberMsg = guild.service.packetFightTeamMember(guildObj, actObj, memberId, teamNo)
			if memberMsg:
				memberMsgList.append(memberMsg)
		
	msgObj = guild_pb2.fightTeam()
	if memberMsgList:
		msgObj.memberList.extend(memberMsgList)
	who.endPoint.rpcActGuildFightTeam(msgObj)
	print "\nrpcActGuildFightTeam", "roleId:%s" % who.id, msgObj

@validSend
def rpcActGuildFightResult(guildObj, actObj, signUpObj, who):
	'''战况数据
	'''
	msgObj = packetFightResult(guildObj, actObj, signUpObj, who)
	who.endPoint.rpcActGuildFightResult(msgObj)
	print "\nrpcActGuildFightResult", "roleId:%s" % who.id, msgObj
	
def packetFightResult(guildObj, actObj, signUpObj, who):
	'''战况
	'''
	teamResultList = signUpObj.getTeamResultBySort()
	teamResultEnemyList = []
	roleCount = signUpObj.getRoleCount()
	roleCountEnemy = 0
	winCount = signUpObj.getWinCount()
	winCountEnemy = 0
	
	pkGuildId = signUpObj.fetch("pkGuild")
	if pkGuildId:
		pkSignUpObj = actObj.signUpList.get(pkGuildId)
		if pkSignUpObj:
			roleCountEnemy = pkSignUpObj.getRoleCount()
			winCountEnemy = pkSignUpObj.getWinCount()
			teamResultEnemyList = pkSignUpObj.getTeamResultBySort()
	
	msgObj = act_guildFight_pb2.fightResult()
	msgObj.teamResultList.extend(teamResultList) # 己方精英队结果
	msgObj.teamResultEnemyList.extend(teamResultEnemyList) # 敌方精英队结果
	msgObj.roleCount = roleCount # 己方人数
	msgObj.roleCountEnemy = roleCountEnemy # 敌方人数
	msgObj.winCount = winCount # 己方胜利场数
	msgObj.winCountEnemy = winCountEnemy # 敌方胜利场数
	msgObj.winCountMy = actObj.getRoleInfoByKey(who.id, "winCount") # 本人胜利场数
	return msgObj

from common import *
from war.defines import *
from guild.defines import *
import activity
import message
import act_guildFight_pb2
import guild_pb2
import war.warctrl
import pst
import guild
import scene
import math
import guild.service
import guild.defines
import team
import copy
import mail
import listener