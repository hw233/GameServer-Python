一.公会bug记录
我修改一个函数代码，函数原来返回一个整数，现在返回一个弱引用公会对象，而调用这个函数的某处忘记了修改，而这个函数返回数刚好需要存盘，
在ujson序列化时，ujson.dumps(dData)，dData里面就有了一个弱引用公会对象，ujson.dumps（dData）执行时候就一声不吭把系统挂掉了。

二.公会战力
方案1
公会的战力是由公会成员的战力的总和，而成员的战力是变化的，任何一个成员战力变化都会改变公会战力。
公会系统需要做一个公会战力排行榜，就是给所有的公会做一个战力排序

解决办法，维护一个公会战队排序队列，公会对象提供一个接口，公会成员战力发生改变的时候就调用这个接口，
更新自己在公会的战斗力，然后在更新公会内部成员战斗力排序，再更新公会在所有公会里面战斗力排序
glGuildFightAbility=[] #所有公会战力排序，[iGuildId1,iGuildId2,iGuildId3,iGuildId4...],战斗力从小到大排序
guildFihgtAbility=[]#公会内部成员的战斗力排序，[iRoleId1,iRoleId2,iRoleId3,iRoleId4...]，战斗力从小到大排序
dFightAbility={}#公会成员战力字典，{iRoleId1:1234,iRoleId2:1212,....}，这样公会一个成员战力发生变化就不用
累加完所有成员的战力，只需要更加变化部分，调整公会战力数值。

方案2：
公会的战斗力排行不需要实时更新，而是定时更新，比如说12小时重新计算一次排行，减小系统压力
定时更新注意：
1.成员加入退出，需要实时处理排序
2.公会的创建和解散，也需要实时处理排序

三.公会申请消息处理
策划只提供会长和长老同意申请人加入公会，而没有拒绝选项，意味着要是一直不同意申请人加入公会，
那这个申请信息会一直保留，可能需要做一个超时丢弃处理，记录申请时间。

四.玩家查看公会排行
1.玩家查看自己的公会排行
  查找玩家公会排行位置就OK
2.玩家查看所有公会排行
  系统以及维护了公会排行，所以获取排行很容易，如果每次玩家获取排行都把系统里所有公会排行信息下发，
  数据可能会比较大，可以用分页，每次下发一个页的数据。



公会祝福，状态（未获取，已获取,重新获取）